package test;

import entities.Reunion;
import entities.conge;
import services.ServiceConge;
import services.ServiceReunion;
import utils.DBConnection;

import java.time.LocalDate;

public class Main {
    public static void main(String[] args) {
        // V√©rifier la connexion √† la base de donn√©es
        DBConnection dbConnection = DBConnection.getInstance();
        if (dbConnection.getCon() != null) {
            System.out.println("‚úÖ Connection status: Connected");

            // Cr√©er une instance de ServiceConge
            ServiceConge sp = new ServiceConge();
            /*
            // üîπ Ajouter un nouvel objet Conge
            conge newConge = new conge(0, "Vacances", new Date(), new Date(), "En attente");
            sp.add(newConge);
            System.out.println("‚úÖ Cong√© ajout√© avec succ√®s !");

            // üîπ R√©cup√©rer et afficher tous les cong√©s
            List<conge> conges = sp.getAll();
            System.out.println("üìã Liste des cong√©s :");
            for (conge c : conges) {
                System.out.println("üÜî ID: " + c.getId() + ", Type: " + c.getType_conge() +
                        ", D√©but: " + c.getDate_debut() + ", Fin: " + c.getDate_fin() +
                        ", Statut: " + c.getStatus());
            }

            // üîπ Mise √† jour d'un cong√©
            int idToUpdate = 3;
            boolean foundForUpdate = false;
            for (conge c : conges) {
                if (c.getId() == idToUpdate) {
                    c.setType_conge("Cong√© Annuel");
                    c.setDate_debut(new Date());
                    c.setDate_fin(new Date(System.currentTimeMillis() + 86400000L * 5));
                    c.setStatus("Approuv√©");
                    sp.update(c);
                    System.out.println("‚úÖ Cong√© avec ID " + idToUpdate + " mis √† jour !");
                    foundForUpdate = true;
                    break;
                }
            }

            if (!foundForUpdate) {
                System.out.println("‚ùå ID " + idToUpdate + " non trouv√© pour mise √† jour !");
            }

            // üîπ Suppression d'un cong√©
            int idToDelete = 4;
            boolean foundForDelete = false;
            for (conge c : sp.getAll()) {
                if (c.getId() == idToDelete) {
                    sp.delete(c);
                    System.out.println("üóëÔ∏è Cong√© avec ID " + idToDelete + " supprim√© !");
                    foundForDelete = true;
                    break;
                }
            }
            if (!foundForDelete) {
                System.out.println("‚ùå ID " + idToDelete + " non trouv√© pour suppression !");
            }

            // ******************** CRUD R√©union ********************

            // Cr√©er une instance de ServiceReunion
            ServiceReunion sr = new ServiceReunion();

            // üîπ Ajouter une r√©union
            Reunion newReunion = new Reunion(0, "R√©union strat√©gique", "Discussion des objectifs", new Date(), "Strat√©gie");
            sr.add(newReunion);
            System.out.println("‚úÖ R√©union ajout√©e avec succ√®s !");

            // üîπ R√©cup√©rer et afficher toutes les r√©unions
            List<Reunion> reunions = sr.getAll();
            System.out.println("üìã Liste des r√©unions :");
            for (Reunion r : reunions) {
                System.out.println("üÜî ID: " + r.getId() + ", Sujet: " + r.getTitre() +
                        ", Date: " + r.getDate() + ", Type: " + r.getType() +
                        ", Description: " + r.getDescription());
            }

            // üîπ Mise √† jour d'une r√©union
            int idReunionToUpdate = 2;
            boolean foundReunionForUpdate = false;
            for (Reunion r : reunions) {
                if (r.getId() == idReunionToUpdate) {
                    r.setTitre("R√©union d'√©quipe");
                    r.setDate(new Date());
                    r.setDescription("R√©vision des progr√®s");
                    r.setType("Op√©rationnelle");
                    sr.update(r);
                    System.out.println("‚úÖ R√©union avec ID " + idReunionToUpdate + " mise √† jour !");
                    foundReunionForUpdate = true;
                    break;
                }
            }
            if (!foundReunionForUpdate) {
                System.out.println("‚ùå ID " + idReunionToUpdate + " non trouv√© pour mise √† jour !");
            }

            // üîπ Suppression d'une r√©union
            int idReunionToDelete = 3;
            boolean foundReunionForDelete = false;
            for (Reunion r : sr.getAll()) {
                if (r.getId() == idReunionToDelete) {
                    sr.delete(r);
                    System.out.println("üóëÔ∏è R√©union avec ID " + idReunionToDelete + " supprim√©e !");
                    foundReunionForDelete = true;
                    break;
                }
            }
            if (!foundReunionForDelete) {
                System.out.println("‚ùå ID " + idReunionToDelete + " non trouv√© pour suppression !");
            }


             */
            ////////////CONGEE
            LocalDate datedebut = LocalDate.of(2025, 3, 15);
            LocalDate datefin = LocalDate.of(2026, 10, 20);
            conge conge1 = new conge("long",datedebut,datefin,"tttttttt");
            conge conge2 = new conge("short",datedebut,datefin,"test");
            sp.add(conge1);
            sp.add(conge2);
           // sp.delete(5);
            sp.update(conge1,3);
            System.out.println(sp.getAll());

            ////////////reunion
            LocalDate Date = LocalDate.of(2025, 3, 15);
            LocalDate Date2 = LocalDate.of(2025, 7, 27);
            Reunion Reunion1 = new Reunion("sbeh","aaaaaaaaa",Date,"urgent");
            Reunion Reunion2 = new Reunion("lil","bbbbbbbbb",Date,"non-urgent");
            ServiceReunion ServiceReunion = new ServiceReunion();
            //ServiceReunion.add(Reunion1);
            ServiceReunion.add(Reunion2);
            //ServiceReunion.delete(3);
            ServiceReunion.update(Reunion1,5);
            System.out.println(ServiceReunion.getAll());





        } else {
            System.out.println("‚ùå Connection status: Not connected");
        }
    }
}
