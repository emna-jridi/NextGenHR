package controllers;

import entities.User;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.stage.Stage;
import services.ServiceUser;
import utils.SessionManager;

import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;

public class ProfileController implements Initializable {

    @FXML
    private TextField nom;
    @FXML
    private TextField prenom;
    @FXML
    private TextField email;
    @FXML
    private TextField telephone;
    @FXML
    private TextField adresse;
    @FXML
    private DatePicker dateNaissance;
    @FXML
    private PasswordField mdp;
    @FXML
    Button btnMettreAJour;

    private final ServiceUser userService = new ServiceUser();
    private User loggedInUser;

    @Override
    public void initialize(URL location, ResourceBundle resources) {
        loggedInUser = SessionManager.getInstance().getLoggedInUser();

        if (loggedInUser != null) {
            System.out.println("Utilisateur charg√©: " + loggedInUser.getNomUser());
            loadUserData();
        } else {
            System.out.println("Aucun utilisateur trouv√© dans la session !");
        }
    }

    private void loadUserData() {
        // V√©rifie si les valeurs sont bien r√©cup√©r√©es
        System.out.println("Chargement des donn√©es de l'utilisateur...");

        nom.setText(loggedInUser.getNomUser());
        prenom.setText(loggedInUser.getPrenomUser());
        email.setText(loggedInUser.getEmailUser());
        telephone.setText(loggedInUser.getTelephoneUser());
        adresse.setText(loggedInUser.getAdresseUser());

        // Ne pas afficher le mot de passe pour des raisons de s√©curit√©
        mdp.setText("");

        if (loggedInUser.getDateNaissanceUser() != null) {
            dateNaissance.setValue(loggedInUser.getDateNaissanceUser());
            System.out.println("Date de naissance charg√©e : " + loggedInUser.getDateNaissanceUser());
        }
    }

    @FXML
    private void OnUpdateClicked(ActionEvent event) {
        if (loggedInUser != null) {
            // V√©rification des champs obligatoires
            if (nom.getText().isEmpty() || prenom.getText().isEmpty() || email.getText().isEmpty()) {
                showAlert(Alert.AlertType.ERROR, "Erreur", "Veuillez remplir tous les champs obligatoires.");
                return;
            }

            // V√©rification de l'email
            if (!email.getText().matches("^[\\w.-]+@[\\w.-]+\\.[a-zA-Z]{2,6}$")) {
                showAlert(Alert.AlertType.ERROR, "Erreur", "Veuillez entrer une adresse email valide.");
                return;
            }

            // V√©rification du t√©l√©phone (uniquement des chiffres, longueur 8-15 caract√®res)
            if (!telephone.getText().matches("\\d{8,15}")) {
                showAlert(Alert.AlertType.ERROR, "Erreur", "Le num√©ro de t√©l√©phone doit contenir entre 8 et 15 chiffres.");
                return;
            }

            // Mise √† jour des informations de l'utilisateur
            loggedInUser.setNomUser(nom.getText());
            loggedInUser.setPrenomUser(prenom.getText());
            loggedInUser.setEmailUser(email.getText());
            loggedInUser.setAdresseUser(adresse.getText());
            loggedInUser.setTelephoneUser(telephone.getText());

            // Mise √† jour de la date de naissance
            if (dateNaissance.getValue() != null) {
                loggedInUser.setDateNaissanceUser(dateNaissance.getValue());
            }

            // Mise √† jour du mot de passe uniquement si un nouveau est entr√©
            if (!mdp.getText().isEmpty()) {
                loggedInUser.setPassword(mdp.getText());
            }

            // V√©rification du r√¥le (par d√©faut : Employ√© si non d√©fini)
            if (loggedInUser.getRole() == null) {
                loggedInUser.setRole(User.Role.valueOf("Employe"));
            }

            // Debugging : Afficher l'ID utilisateur avant mise √† jour
            System.out.println("Mise √† jour de l'utilisateur ID: " + loggedInUser.getIdUser() + " | Role: " + loggedInUser.getRole());

            // Mise √† jour en base de donn√©es
            boolean success = userService.update(loggedInUser);

            if (success) {
                // üîπ Mettre √† jour l'utilisateur dans la session
                SessionManager.getInstance().setLoggedInUser(loggedInUser);
                System.out.println("Mise √† jour r√©ussie !");
                showAlert(Alert.AlertType.INFORMATION, "Mise √† jour", "Les informations ont √©t√© mises √† jour avec succ√®s.");
            } else {
                System.out.println("√âchec de la mise √† jour !");
                showAlert(Alert.AlertType.ERROR, "Erreur", "√âchec de la mise √† jour des informations.");
            }
        }
    }

    private void showAlert(Alert.AlertType alertType, String title, String content) {
        Alert alert = new Alert(alertType);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(content);
        alert.showAndWait();
    }

}
